/// 给定两个正整数，x, y 分别表示价值为75和10的硬币的数目
/// Alice Bob 正在进行游戏，每一轮中alice 先进行操作，bob后进行操作，玩家需要拿出价值总和为115的硬币。如果一名玩家无法执行此操作
/// 那么这名玩家输掉游戏
/// 两名玩家都采取最优策略，返回游戏额赢家
///
/// 分析 因为10的倍数不可能等于115，所以面额为10的硬币不能单独选，至少要选1个面额为75的硬币
/// 又由于 75 * 2 = 150 > 115，所以面额为75 的硬币恰好选1个
/// 由于75 + 10 * 4 = 115，所以面额为10的硬币要恰好选4个
/// 本质上，求解二元一次不定方程 75a + 10b = 115, 它有唯一的正整数解 a = 1,b = 4
/// 如果一开始alice就没法选，或者偶数轮后alice没法选，那么bob胜出，否则alice胜出
#[test]
pub fn test_losing_player() {
    let x = 2;
    let y = 7;
    let res = losing_player(x, y);
    println!("res: {:?}", res)
}

fn losing_player(x: i32, y:i32) -> String {
    if x.min(y / 4) % 2 != 0 { "Alice".to_string() } else { "Bob".to_string() }
}